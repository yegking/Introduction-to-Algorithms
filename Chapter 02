Excrcise 2.1.2

Rewrite the Insertion-Sort procedure to sort into nonincreasing instead of nondecreasing order.

  for j = 2 to A.length
      key = A[j]
      i = j-1
      while i>0 and A[i]<key
        A[i+1] = A[i]
        i = i-1
      A[i+1] = key  
    

    
    
    
    
Excerise 2.1.3

Consider the searching problem:
Input: A sequence of n numbers A=⟨a1,a2,…,an⟩ and a value ν
Output: And index i such that ν=A[i] or the special value NIL if ν does not appear in A
Write the pseudocode for linear search, which scans through the sequence, looking for ν.
Using a loop invariant, prove that your algorithm is correct. Make sure that your loop invariant fulfills the three necessary properties.

SEARCH(A,v)
  for i = 1 to A.length
    if A[i] == v
      return i
    return NIL
    
I'm going to state the loop invariant as:

At the start of each iteration of the for loop, the subarray A[1..i−1] consists of elements that are different than ν.

Here are the three properties:

Initialization:
Initially the subarray is the empty array, so proving it is trivial.

Maintenance:
On each step, we know that A[1..i−1] does not contain ν. We compare it with A[i]. If they are the same, we return i, which is a correct result. Otherwise, we continue to the next step. We have already insured that A[A..i−1] does not contain ν and that A[i] is different from ν, so this step preserves the invariant.

Termination:
The loop terminates when i>A.length. Since i increases by 1 and i>A.length, we know that all the elements in A have been checked and it has been found that ν is not among them. Thus, we return NIL.
我需要证明的循环不变式是：
在循环的每次迭代开始时，数组A[1..i-1]中的元素和v不相同

这里有三个性质
初始化：
刚开始的子数组是空的，所以成立
保持：
每走一步，我们之前已经知道数组A中不存在v，我们把v和A[i]比较，如果相同，返回i，否则，我们继续
下一步，在确定A数组中不包含v并且A[i]也和v不相同，这一步也是正确的


